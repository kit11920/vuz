#ifndef ARRAY_H__
#define ARRAY_H__

#include <stdlib.h>


typedef int (*uni_cmp_t)(const void *l, const void *r);


/// @brief Находит индекс последнего отрицательного элемента массива src
/// если такого элемента нет, то в p_last_minus_el записывается запоследний элемент массива
/// @param [in] pb_src - указатель на начало массива src
/// @param [in] pe_src - указатель на запоследний элемент массива src
/// @param [out] p_last_minus_el - указатель на указатель на индекс последнего отрицательного элемента
/// @return код ошибки
int find_last_elem_filter(const int *pb_src, const int *pe_src, const int **pp_last_minus_el);


/// @brief Копирует массив src, заданный указателями на его начало и зпоследний элемент
/// в массив dst, заданный указателем на его начало
/// И задает адрес указателю на конец массива dst
/// @param [in] pb_src - указатель на начало массива src
/// @param [in] pe_src - указатель на запоследний элемент массива src
/// @param [in] pb_dst - указатель на начало массива dst
/// @param [out] pe_dst - указатель на указатель запоследнего элемента массива dst
void copy_elems_arr(const int *pb_src, const int *pe_src, int *const pb_dst, int **pe_dst);


/// @brief Функция фильтра
/// (В массиве остаются элементы от нулевого до p-ого, 
/// где p - индекс последнего отрицательного элемента этого массива, 
/// либо число n, равное длине массива, если такого элемента в массиве нет)
/// @param [in] pb_src - указатель на начало исходного массива
/// @param [in] pe_src - указатель на запоследний элемент исходного массива
/// @param [out] pb_dst - указатель на указатель на начало отфильтрованного массива
/// @param [out] pe_dst  - указатель на указатель на запоследний элемент отфильтрованного массива
/// @return код ошибки
int key(const int *pb_src, const int *pe_src, int **pb_dst, int **pe_dst);


/// @brief Компаратор int чисел
/// @param [in] l - указатель на левый элемент сравнения
/// @param [in] r - указатель на правый элемент сравнения
/// @return как в функции strcmp()
int cmp_int(const void *l, const void *r);

/// @brief Компаратор строк
/// @param [in] l - указатель на левый элемент сравнения
/// @param [in] r - указатель на правый элемент сравнения
/// @return  как в функции strcmp()
int cmp_str(const void *l, const void *r);

/// @brief Меняет местами элементы
/// @param [in out] l - указатель на левый элемент
/// @param [in out] r - указатель на правый элемент
/// @param [in] elem_size - размер одного элемента
void swap(void *l, void *r, size_t elem_size);


/// @brief модифицированная сортировка пузырьком 3
/// Запоминает, где произошёл последний обмен элементов, 
/// и при следующем проходе алгоритм не заходит за это место. 
/// Если последними поменялись i-ый и i + 1-ый элементы, 
/// то при следующем проходе алгоритм не сравнивает элементы за i-м.
/// и
/// Нечётные и чётные проходы выполняются в противоположных направлениях: 
/// нечётные проходы от начала к концу, чётные — от конца массива к его началу. 
/// При нечётных проходах большие элементы сдвигаются к концу массива, 
/// а при чётных проходах — меньшие элементы двигаются к его началу.
/// @param [in out] arr 
/// @param [in] len_arr 
/// @param [in] elem_size 
/// @param [in] cmp 
void mysort(void *arr, size_t len_arr, size_t elem_size, uni_cmp_t cmp);

#endif


